
package controllers;

import controllers.interfaces.IUserController;
import models.Permission;
import models.User;
import repositories.interfaces.IUserRepository;
import data.DataValidator;

public class UserController implements IUserController {
    private final IUserRepository userRepository;

    public UserController(IUserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public User getUserByEmail(String email, User currentUser) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: " + email +
                (currentUser != null ? " (–ó–∞–ø—Ä–æ—Å –æ—Ç: " + currentUser.getEmail() + ")" : ""));

        // –ï—Å–ª–∏ currentUser == null (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—Ö–æ–¥–µ), –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        if (currentUser != null && !"ADMIN".equalsIgnoreCase(currentUser.getRole().toString())) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email.");
            return null;
        }

        return userRepository.getUserByEmail(email);
    }

    @Override
    public User createUser(String name, String email, int age, String password) {
        if (!DataValidator.isValidEmail(email)) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@mail.com.");
            return null;
        }
        if (!DataValidator.isValidPassword(password)) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.");
            return null;
        }
        if (!DataValidator.isValidName(name)) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º.");
            return null;
        }

        return userRepository.createUser(name, email, age, password);
    }

    @Override
    public User searchUser(String query) {
        User foundUser = userRepository.searchUser(query);
        if (foundUser == null) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        } else {
            System.out.println("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + foundUser.getName() + " (Email: " + foundUser.getEmail() + ")");
        }
        return foundUser;
    }

    @Override
    public boolean deleteUser(String email, User currentUser) {
        System.out.println("üîç –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + email + " (–ó–∞–ø—Ä–æ—Å –æ—Ç: " + currentUser.getEmail() + ")");

        if (!"ADMIN".equalsIgnoreCase(currentUser.getRole().toString())) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
            return false;
        }

        boolean success = userRepository.deleteUser(email);
        if (success) {
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + email + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
        } else {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + email + " –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.");
        }

        return success;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userRepository (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –µ—â–µ)
    public IUserRepository getUserRepository() {
        return userRepository;
    }
}
