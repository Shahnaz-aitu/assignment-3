package repositories;

import models.Room;
import models.RoomCategory;
import repositories.interfaces.IRoomRepository;
import data.interfaces.IDB;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class RoomRepository implements IRoomRepository {
    private final IDB db;

    public RoomRepository(IDB db) {
        this.db = db;
    }

    @Override
    public List<Room> getAllRooms() {
        List<Room> rooms = new ArrayList<>();
        String sql = "SELECT id, hotel_id, COALESCE(room_type, 'Unknown') AS room_type, COALESCE(category, 'STANDARD') AS category, price, is_available FROM rooms";
        try (Connection conn = db.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                String roomType = rs.getString("room_type");
                String category = rs.getString("category");

                System.out.println("üîç –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–º–µ—Ä ID: " + rs.getInt("id") + " | –¢–∏–ø: " + roomType + " | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category);

                rooms.add(new Room(
                        rs.getInt("id"),
                        rs.getInt("hotel_id"),
                        roomType,
                        rs.getDouble("price"),
                        rs.getBoolean("is_available"),
                        RoomCategory.valueOf(category.toUpperCase())
                ));
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤: " + e.getMessage());
            e.printStackTrace();
        }
        return rooms;
    }

    @Override
    public List<Room> getRoomsByHotelId(int hotelId) {
        List<Room> rooms = new ArrayList<>();
        String sql = "SELECT r.id, r.hotel_id, COALESCE(r.room_type, 'Unknown') AS room_type, " +
                "r.price, r.is_available, COALESCE(rc.category, 'Unknown') AS category " +
                "FROM rooms r " +
                "LEFT JOIN room_categories rc ON r.category_id = rc.id " +  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º JOIN
                "WHERE r.hotel_id = ?";

        try (Connection conn = db.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, hotelId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                String roomType = rs.getString("room_type"); // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø –Ω–æ–º–µ—Ä–∞
                String category = rs.getString("category");

                System.out.println("üîç –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–º–µ—Ä ID: " + rs.getInt("id") + " | –¢–∏–ø: " + roomType + " | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category);

                rooms.add(new Room(
                        rs.getInt("id"),
                        rs.getInt("hotel_id"),
                        roomType, // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
                        rs.getDouble("price"),
                        rs.getBoolean("is_available"),
                        RoomCategory.valueOf(category.toUpperCase())
                ));
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ ID –æ—Ç–µ–ª—è: " + e.getMessage());
            e.printStackTrace();
        }
        return rooms;
    }



    @Override
    public boolean isRoomAvailable(int roomId, Date checkIn, Date checkOut) {
        String sql = "SELECT COUNT(*) FROM bookings " +
                "WHERE room_id = ? " +
                "AND (check_in_date < ? AND check_out_date > ?)";
        try (Connection conn = db.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, roomId);
            stmt.setDate(2, new java.sql.Date(checkOut.getTime()));
            stmt.setDate(3, new java.sql.Date(checkIn.getTime()));

            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                return count == 0;
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public Room getRoomById(int id) {
        String sql = "SELECT r.id, r.hotel_id, COALESCE(r.room_type, 'Unknown') AS room_type, " +
                "r.price, r.is_available, COALESCE(rc.category, 'Unknown') AS category " +
                "FROM rooms r " +
                "LEFT JOIN room_categories rc ON r.category_id = rc.id " +  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω LEFT JOIN
                "WHERE r.id = ?";

        try (Connection conn = db.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String roomType = rs.getString("room_type");
                String category = rs.getString("category"); // ‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è

                System.out.println("üîç –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–º–µ—Ä ID: " + rs.getInt("id") + " | –¢–∏–ø: " + roomType + " | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category);

                return new Room(
                        rs.getInt("id"),
                        rs.getInt("hotel_id"),
                        roomType,
                        rs.getDouble("price"),
                        rs.getBoolean("is_available"),
                        RoomCategory.valueOf(category.toUpperCase()) // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                );
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ ID: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }
}