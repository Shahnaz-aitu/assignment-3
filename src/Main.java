import controllers.*;
import controllers.interfaces.*;
import data.PostgresDB;
import data.interfaces.IDB;
import main.HotelBookingApplication;
import models.*;
import repositories.*;
import repositories.interfaces.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class Main {
    public static void main(String[] args) {
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ Hotel Booking System...");

        try {
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            IDB db = new PostgresDB("localhost", 5432, "HotelProject", "postgres", "12060745");

            if (db.getConnection() == null) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            if (!checkTableExists(db, "orders") || !checkTableExists(db, "users")) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü (orders/users) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã.");
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
            IHotelRepository hotelRepo = new HotelRepository(db);
            IRoomRepository roomRepo = new RoomRepository(db);
            IBookingRepository bookingRepo = new BookingRepository(db);
            IUserRepository userRepo = new UserRepository(db);

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
            IHotelController hotelController = new HotelController(hotelRepo);
            IRoomController roomController = new RoomController(roomRepo);
            IBookingController bookingController = new BookingController(bookingRepo, userRepo, roomRepo, hotelRepo);
            IUserController userController = new UserController(userRepo);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            ensureAdminExists(userRepo);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            ensureTestUserExists(userRepo);

            // üìå –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ JOIN-–∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞)
            System.out.println("\n=== ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ JOIN-–∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞) ===");
            Order order = Order.getFullOrderDescription(1, db);
            if (order != null) {
                System.out.println("–ó–∞–∫–∞–∑ ‚Ññ" + order.getOrderId());
                System.out.println("–ö–ª–∏–µ–Ω—Ç: " + order.getUserName() + " (" + order.getUserEmail() + ")");
                System.out.println("–¢–æ–≤–∞—Ä—ã:");
                for (OrderDetails details : order.getOrderDetails()) {
                    System.out.println("- " + details.getProductName() + " (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + details.getCategory() + ")");
                }
            } else {
                System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
            }

            // üìå –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ ADMIN)
            System.out.println("\n=== ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å ADMIN) ===");
            User adminUser = userRepo.getUserByEmail("admin@mail.com");

            if (adminUser == null) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã.");
            } else {
                System.out.println("–†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + adminUser.getRole());
                if (adminUser.getRole() == Role.ADMIN) {
                    boolean deleted = userController.deleteUser("testuser@mail.com", adminUser);
                    System.out.println("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + (deleted ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤)"));
                } else {
                    System.err.println("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ADMIN.");
                }
            }

            // üìå –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            System.out.println("\n=== ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ===");
            int bookingId = 1; // –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bookingController.showFullBookingDescription(bookingId);

            // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            HotelBookingApplication app = new HotelBookingApplication(
                    hotelController,
                    roomController,
                    bookingController,
                    userController
            );
            app.mainMenu();

            // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            db.close();
            System.out.println("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    private static boolean checkTableExists(IDB db, String tableName) {
        try (Connection con = db.getConnection();
             PreparedStatement stmt = con.prepareStatement(
                     "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = ?);")) {
            stmt.setString(1, tableName.toLowerCase());
            ResultSet rs = stmt.executeQuery();
            return rs.next() && rs.getBoolean(1);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: " + e.getMessage());
            return false;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    private static void ensureAdminExists(IUserRepository userRepo) {
        try (Connection con = userRepo.getDb().getConnection();
             PreparedStatement stmt = con.prepareStatement(
                     "SELECT COUNT(*) FROM users WHERE email = 'admin@mail.com'")) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next() && rs.getInt(1) == 0) {
                System.out.println("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...");

                try (PreparedStatement insertStmt = con.prepareStatement(
                        "INSERT INTO users (name, email, age, password, role) VALUES (?, ?, ?, ?, ?)")) {
                    insertStmt.setString(1, "Admin");
                    insertStmt.setString(2, "admin@mail.com");
                    insertStmt.setInt(3, 30);
                    insertStmt.setString(4, "adminPass");
                    insertStmt.setString(5, "ADMIN");
                    insertStmt.executeUpdate();
                    System.out.println("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                }
            } else {
                System.out.println("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + e.getMessage());
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private static void ensureTestUserExists(IUserRepository userRepo) {
        try (Connection con = userRepo.getDb().getConnection();
             PreparedStatement stmt = con.prepareStatement(
                     "SELECT COUNT(*) FROM users WHERE email = 'testuser@mail.com'")) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next() && rs.getInt(1) == 0) {
                System.out.println("‚ÑπÔ∏è Test User –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");

                try (PreparedStatement insertStmt = con.prepareStatement(
                        "INSERT INTO users (name, email, age, password, role) VALUES (?, ?, ?, ?, ?)")) {
                    insertStmt.setString(1, "Test User");
                    insertStmt.setString(2, "testuser@mail.com");
                    insertStmt.setInt(3, 25);
                    insertStmt.setString(4, "testPass");
                    insertStmt.setString(5, "USER");
                    insertStmt.executeUpdate();
                    System.out.println("‚úÖ Test User —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                }
            } else {
                System.out.println("‚úÖ Test User —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Test User: " + e.getMessage());
        }
    }
}
